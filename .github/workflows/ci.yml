name: CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  pull-requests: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.22.5'
  GIST_ID: 8f41a7768e9dfb582fae9b736a8cb809

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: go mod download

    - name: Run tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
        go tool cover -func=coverage.txt

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true

    # - name: Initialize test badge content
    #   if: github.event_name != 'pull_request'
    #   run: |
    #     echo '{
    #       "schemaVersion": 1,
    #       "label": "tests",
    #       "message": "pending",
    #       "color": "yellow"
    #     }' > badge-content.json
    #     curl -L \
    #       -X PATCH \
    #       -H "Accept: application/vnd.github+json" \
    #       -H "Authorization: Bearer ${{ secrets.GIST_SECRET }}" \
    #       -H "X-GitHub-Api-Version: 2022-11-28" \
    #       https://api.github.com/gists/${{ env.GIST_ID }} \
    #       -d "{\"files\":{\"resource-reaper-tests.json\":{\"content\":$(cat badge-content.json | jq -R -s .)}}"

    # - name: Generate test badge
    #   if: github.event_name != 'pull_request'
    #   uses: schneegans/dynamic-badges-action@v1.6.0
    #   with:
    #     auth: ${{ secrets.GIST_SECRET }}
    #     gistID: 8f41a7768e9dfb582fae9b736a8cb809 # You'll need to create a gist and add its ID here
    #     filename: resource-reaper-tests.json
    #     label: tests
    #     message: ${{ job.status == 'success' && 'passing' || 'failed' }}
    #     color: ${{ job.status == 'success' && 'green' || 'red' }}
    #     namedLogo: go

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      continue-on-error: true
      with:
        version: latest
        args: --issues-exit-code=0
        only-new-issues: true

    - name: Report lint status
      if: always()
      run: |
        echo "Lint check completed. Proceeding with build regardless of lint status."

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=sha,prefix={{branch}}-
          type=ref,event=branch
          type=ref,event=pr

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  release:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write
      
    steps:
    - uses: actions/checkout@v3

    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        generate_release_notes: true
        files: |
          README.md
          config/*.yaml
          examples/*.yaml
